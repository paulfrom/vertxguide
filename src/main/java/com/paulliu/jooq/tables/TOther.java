/*
 * This file is generated by jOOQ.
*/
package com.paulliu.jooq.tables;


import com.paulliu.jooq.Indexes;
import com.paulliu.jooq.Keys;
import com.paulliu.jooq.Test;
import com.paulliu.jooq.tables.records.TOtherRecord;

import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.10.5"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class TOther extends TableImpl<TOtherRecord> {

    private static final long serialVersionUID = 1217459794;

    /**
     * The reference instance of <code>test.t_other</code>
     */
    public static final TOther T_OTHER = new TOther();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<TOtherRecord> getRecordType() {
        return TOtherRecord.class;
    }

    /**
     * The column <code>test.t_other.id</code>.
     */
    public final TableField<TOtherRecord, Integer> ID = createField("id", org.jooq.impl.SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>test.t_other.other_name</code>.
     */
    public final TableField<TOtherRecord, String> OTHER_NAME = createField("other_name", org.jooq.impl.SQLDataType.VARCHAR(32).nullable(false), this, "");

    /**
     * The column <code>test.t_other.other_thing</code>.
     */
    public final TableField<TOtherRecord, String> OTHER_THING = createField("other_thing", org.jooq.impl.SQLDataType.VARCHAR(32).nullable(false), this, "");

    /**
     * Create a <code>test.t_other</code> table reference
     */
    public TOther() {
        this(DSL.name("t_other"), null);
    }

    /**
     * Create an aliased <code>test.t_other</code> table reference
     */
    public TOther(String alias) {
        this(DSL.name(alias), T_OTHER);
    }

    /**
     * Create an aliased <code>test.t_other</code> table reference
     */
    public TOther(Name alias) {
        this(alias, T_OTHER);
    }

    private TOther(Name alias, Table<TOtherRecord> aliased) {
        this(alias, aliased, null);
    }

    private TOther(Name alias, Table<TOtherRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Test.TEST;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.T_OTHER_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<TOtherRecord, Integer> getIdentity() {
        return Keys.IDENTITY_T_OTHER;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<TOtherRecord> getPrimaryKey() {
        return Keys.KEY_T_OTHER_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<TOtherRecord>> getKeys() {
        return Arrays.<UniqueKey<TOtherRecord>>asList(Keys.KEY_T_OTHER_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public TOther as(String alias) {
        return new TOther(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public TOther as(Name alias) {
        return new TOther(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public TOther rename(String name) {
        return new TOther(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public TOther rename(Name name) {
        return new TOther(name, null);
    }
}
