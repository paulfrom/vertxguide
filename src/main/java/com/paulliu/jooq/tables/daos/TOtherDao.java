/*
 * This file is generated by jOOQ.
*/
package com.paulliu.jooq.tables.daos;


import com.paulliu.jooq.tables.TOther;
import com.paulliu.jooq.tables.records.TOtherRecord;

import io.github.jklingsporn.vertx.jooq.shared.internal.async.AbstractAsyncVertxDAO;

import java.util.List;

import javax.annotation.Generated;

import org.jooq.Configuration;


import io.reactivex.Completable;
import io.reactivex.Observable;
import io.reactivex.Single;
import java.util.Optional;
import io.github.jklingsporn.vertx.jooq.rx.async.AsyncRXQueryExecutor;
/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.10.5"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class TOtherDao extends AbstractAsyncVertxDAO<TOtherRecord, com.paulliu.jooq.tables.pojos.TOther, Integer, Single<List<com.paulliu.jooq.tables.pojos.TOther>>, Single<Optional<com.paulliu.jooq.tables.pojos.TOther>>, Single<Integer>, Single<Integer>> implements io.github.jklingsporn.vertx.jooq.rx.VertxDAO<TOtherRecord,com.paulliu.jooq.tables.pojos.TOther,Integer> {

    /**
     * @param configuration Used for rendering, so only SQLDialect must be set and must be one of the MYSQL types or POSTGRES.
     * @param delegate A configured AsyncSQLClient that is used for query execution
     */
    public TOtherDao(Configuration configuration,io.vertx.reactivex.ext.asyncsql.AsyncSQLClient delegate) {
        super(TOther.T_OTHER, com.paulliu.jooq.tables.pojos.TOther.class, new AsyncRXQueryExecutor<TOtherRecord,com.paulliu.jooq.tables.pojos.TOther,Integer>(delegate,com.paulliu.jooq.tables.pojos.TOther::new, TOther.T_OTHER), configuration);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    protected Integer getId(com.paulliu.jooq.tables.pojos.TOther object) {
        return object.getId();
    }

    /**
     * Find records that have <code>other_name IN (values)</code> asynchronously
     */
    public Single<List<com.paulliu.jooq.tables.pojos.TOther>> findManyByOtherName(List<String> values) {
        return findManyByCondition(TOther.T_OTHER.OTHER_NAME.in(values));
    }

    /**
     * Find records that have <code>other_thing IN (values)</code> asynchronously
     */
    public Single<List<com.paulliu.jooq.tables.pojos.TOther>> findManyByOtherThing(List<String> values) {
        return findManyByCondition(TOther.T_OTHER.OTHER_THING.in(values));
    }

    @Override
    protected java.util.function.Function<Object,Integer> keyConverter(){
        return lastId -> Integer.valueOf(((Long)lastId).intValue());
    }
}
