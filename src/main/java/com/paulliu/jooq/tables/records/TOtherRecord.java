/*
 * This file is generated by jOOQ.
*/
package com.paulliu.jooq.tables.records;


import com.paulliu.jooq.tables.TOther;
import com.paulliu.jooq.tables.interfaces.ITOther;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record3;
import org.jooq.Row3;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.10.5"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class TOtherRecord extends UpdatableRecordImpl<TOtherRecord> implements Record3<Integer, String, String>, ITOther {

    private static final long serialVersionUID = 51865514;

    /**
     * Setter for <code>test.t_other.id</code>.
     */
    @Override
    public TOtherRecord setId(Integer value) {
        set(0, value);
        return this;
    }

    /**
     * Getter for <code>test.t_other.id</code>.
     */
    @Override
    public Integer getId() {
        return (Integer) get(0);
    }

    /**
     * Setter for <code>test.t_other.other_name</code>.
     */
    @Override
    public TOtherRecord setOtherName(String value) {
        set(1, value);
        return this;
    }

    /**
     * Getter for <code>test.t_other.other_name</code>.
     */
    @Override
    public String getOtherName() {
        return (String) get(1);
    }

    /**
     * Setter for <code>test.t_other.other_thing</code>.
     */
    @Override
    public TOtherRecord setOtherThing(String value) {
        set(2, value);
        return this;
    }

    /**
     * Getter for <code>test.t_other.other_thing</code>.
     */
    @Override
    public String getOtherThing() {
        return (String) get(2);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    /**
     * {@inheritDoc}
     */
    @Override
    public Record1<Integer> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record3 type implementation
    // -------------------------------------------------------------------------

    /**
     * {@inheritDoc}
     */
    @Override
    public Row3<Integer, String, String> fieldsRow() {
        return (Row3) super.fieldsRow();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Row3<Integer, String, String> valuesRow() {
        return (Row3) super.valuesRow();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<Integer> field1() {
        return TOther.T_OTHER.ID;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<String> field2() {
        return TOther.T_OTHER.OTHER_NAME;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<String> field3() {
        return TOther.T_OTHER.OTHER_THING;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Integer component1() {
        return getId();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public String component2() {
        return getOtherName();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public String component3() {
        return getOtherThing();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Integer value1() {
        return getId();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public String value2() {
        return getOtherName();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public String value3() {
        return getOtherThing();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public TOtherRecord value1(Integer value) {
        setId(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public TOtherRecord value2(String value) {
        setOtherName(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public TOtherRecord value3(String value) {
        setOtherThing(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public TOtherRecord values(Integer value1, String value2, String value3) {
        value1(value1);
        value2(value2);
        value3(value3);
        return this;
    }

    // -------------------------------------------------------------------------
    // FROM and INTO
    // -------------------------------------------------------------------------

    /**
     * {@inheritDoc}
     */
    @Override
    public void from(ITOther from) {
        setId(from.getId());
        setOtherName(from.getOtherName());
        setOtherThing(from.getOtherThing());
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public <E extends ITOther> E into(E into) {
        into.from(this);
        return into;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached TOtherRecord
     */
    public TOtherRecord() {
        super(TOther.T_OTHER);
    }

    /**
     * Create a detached, initialised TOtherRecord
     */
    public TOtherRecord(Integer id, String otherName, String otherThing) {
        super(TOther.T_OTHER);

        set(0, id);
        set(1, otherName);
        set(2, otherThing);
    }

    public TOtherRecord(io.vertx.core.json.JsonObject json) {
        this();
        fromJson(json);
    }
}
